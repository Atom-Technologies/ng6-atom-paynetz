import { Component } from '@angular/core';
import * as hash from 'js-sha512';
export class ProcessPaymentComponent {
    constructor() {
        this.mdd = null;
        this.bankId = null;
    }
    ngOnInit() {
    }
    setLoginid(login) {
        this.loginId = login;
    }
    setPassword(password) {
        this.password = password;
    }
    setURL(url) {
        this.url = url;
    }
    setClientCode(clientCode) {
        this.clientCode = clientCode;
    }
    setRequestHaskKey(requestHashKey) {
        this.requestHashKey = requestHashKey;
    }
    setResponseHashKey(responseHashKey) {
        this.responseHashKey = responseHashKey;
    }
    setProdId(prodid) {
        this.prodid = prodid;
    }
    setTxnId(txnid) {
        this.txnid = txnid;
    }
    setCustAcc(custacc) {
        this.custacc = custacc;
    }
    setAmount(amt) {
        this.amt = amt;
    }
    setCurrency(txncurr) {
        this.txncurr = txncurr;
    }
    setTxnType(txntype) {
        this.txntype = txntype;
    }
    setReturnUrl(returnURL) {
        this.returnURL = 'https://www.atomtech.in/angular-kit-handle/params_response.php';
    }
    setTxnsCamt(txnscamt) {
        this.txnscamt = txnscamt;
    }
    setCustomerName(udf1) {
        this.udf1 = udf1;
    }
    setCustomerEmail(udf2) {
        this.udf2 = udf2;
    }
    setCustomerMobile(udf3) {
        this.udf3 = udf3;
    }
    setCustomerAddress(udf4) {
        this.udf4 = udf4;
    }
    setMdd(mdd) {
        this.mdd = mdd;
    }
    setBankId(bankId) {
        this.bankId = bankId;
    }
    generateChecksum() {
        this.signature = this.loginId + this.password + this.txntype + this.prodid + this.txnid + this.amt + this.txncurr;
        return hash.sha512.hmac(this.requestHashKey, this.signature);
    }
    payNow() {
        let urlToPay = this.url;
        urlToPay += '?login=' + this.loginId;
        urlToPay += '&pass=' + this.password;
        urlToPay += '&ttype=' + this.txntype;
        urlToPay += '&prodid=' + this.prodid;
        urlToPay += '&amt=' + this.amt;
        urlToPay += '&txncurr=' + this.txncurr;
        urlToPay += '&txnscamt=' + this.txnscamt;
        urlToPay += '&clientcode=' + btoa(this.clientCode);
        urlToPay += '&txnid=' + this.txnid;
        urlToPay += '&date=' + this.formatDate(new Date);
        urlToPay += '&custacc=' + this.custacc;
        urlToPay += '&ru=' + this.returnURL;
        urlToPay += '&signature=' + this.generateChecksum();
        urlToPay += '&udf1=' + this.udf1;
        urlToPay += '&udf2=' + this.udf2;
        urlToPay += '&udf3=' + this.udf3;
        urlToPay += '&udf4=' + this.udf4;
        if (this.mdd != null) {
            urlToPay += '&mdd=' + this.mdd;
        }
        if (this.bankId != null) {
            urlToPay += '&bankid=' + this.bankId;
        }
        const url = encodeURI(urlToPay);
        let res = null;
        const left = (window.screen.width / 2) - ((1200 / 2) + 10);
        const top = '22%';
        const childWindow = window.open(url, 'Atom Paynetz', 'status=no,height=600,width=1200,resizable=yes,left='
            + left + ',top=' + top + ',screenX=' + left + ',screenY='
            + top + ',toolbar=no,menubar=no,scrollbars=no,location=no,directories=no');
        const promise = new Promise(resolve => {
            window.addEventListener('message', function (e) {
                if (e.origin === 'https://www.atomtech.in') {
                    res = e.data;
                    childWindow.close();
                }
            }, false);
            const intervalID = window.setInterval(checkWindow, 500);
            function checkWindow(e) {
                if (childWindow && childWindow.closed) {
                    if (res) {
                        this.response = res;
                        window.clearInterval(intervalID);
                        resolve({
                            status: true,
                            data: res,
                        });
                    }
                    else {
                        window.clearInterval(intervalID);
                        window.clearInterval(intervalID);
                        resolve({
                            status: false,
                            data: 'payment not completed',
                        });
                    }
                }
            }
        });
        return promise;
    }
    validateResponse(mmp_txn, mer_txn, f_code, prod, discriminator, amt, bank_txn, signature) {
        const string_verify = mmp_txn + mer_txn + f_code + prod + discriminator + amt + bank_txn;
        const sig = hash.sha512.hmac(this.responseHashKey, string_verify);
        if (signature === sig) {
            return {
                'status': true,
                'message': 'Signature matched = ' + sig + ' = ' + this.responseHashKey
            };
        }
        else {
            return {
                'status': false,
                'message': 'Signature mismatched = ' + sig + ' = ' + this.responseHashKey
            };
        }
    }
    formatDate(date) {
        const day = date.getDate();
        let monthIndex = date.getMonth() + 1;
        const year = date.getFullYear();
        const second = date.getSeconds();
        const hours = date.getHours();
        const minutes = date.getMinutes();
        if (monthIndex < 10) {
            monthIndex = '0' + monthIndex;
        }
        return day + '/' + Number(monthIndex) + '/' + year + ' ' + hours + ':' + minutes + ':' + second;
    }
}
ProcessPaymentComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-config',
                template: `<p>
  config works!
</p>
`,
                styles: [``]
            },] },
];
ProcessPaymentComponent.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,