{"version":3,"sources":["ng://ng6-atom-paynetz/lib/ProcessPayment/ProcessPayment.component.ts","ng://ng6-atom-paynetz/lib/ng6-atom-paynetz.module.ts"],"names":["ProcessPaymentComponent","this","mdd","bankId","prototype","ngOnInit","setLoginid","login","loginId","setPassword","password","setURL","url","setClientCode","clientCode","setRequestHaskKey","requestHashKey","setResponseHashKey","responseHashKey","setProdId","prodid","setTxnId","txnid","setCustAcc","custacc","setAmount","amt","setCurrency","txncurr","setTxnType","txntype","setReturnUrl","returnURL","setTxnsCamt","txnscamt","setCustomerName","udf1","setCustomerEmail","udf2","setCustomerMobile","udf3","setCustomerAddress","udf4","setMdd","setBankId","generateChecksum","signature","hash.sha512","hmac","payNow","urlToPay","btoa","formatDate","Date","encodeURI","res","left","window","screen","width","childWindow","open","Promise","resolve","addEventListener","e","origin","data","close","intervalID","setInterval","checkWindow","closed","response","clearInterval","status","validateResponse","mmp_txn","mer_txn","f_code","prod","discriminator","bank_txn","string_verify","sig","message","date","day","getDate","monthIndex","getMonth","year","getFullYear","second","getSeconds","hours","getHours","minutes","getMinutes","Number","Component","args","selector","template","styles","Ng6AtomPaynetzModule","NgModule","imports","BrowserModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport * as hash from 'js-sha512';\r\n\r\n@Component({\r\n  selector: 'lib-config',\r\n  template: `<p>\r\n  config works!\r\n</p>\r\n`,\r\n  styles: [``]\r\n})\r\n\r\nexport class ProcessPaymentComponent implements OnInit {\r\n\r\n  private loginId: any;\r\n  private password: any;\r\n  private url: any;\r\n  private clientCode: any;\r\n  private requestHashKey: any;\r\n  private responseHashKey: any;\r\n  private prodid: any;\r\n  private signature: any;\r\n  private amt: any;\r\n  private txncurr: any;\r\n  private txntype: any;\r\n  private txnscamt: any;\r\n  private txnid: any;\r\n  private custacc: any;\r\n  private returnURL: any;\r\n  private mdd = null;\r\n  private bankId = null;\r\n  private udf1: any;\r\n  private udf2: any;\r\n  private udf3: any;\r\n  private udf4: any;\r\n  private childWindow: any;\r\n  private response: any;\r\n  constructor() {\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  setLoginid(login: string) {\r\n    this.loginId = login;\r\n  }\r\n\r\n  setPassword(password: string) {\r\n    this.password = password;\r\n  }\r\n\r\n  setURL(url: string) {\r\n    this.url = url;\r\n  }\r\n\r\n  setClientCode(clientCode: string) {\r\n    this.clientCode = clientCode;\r\n  }\r\n\r\n  setRequestHaskKey(requestHashKey: string) {\r\n    this.requestHashKey = requestHashKey;\r\n  }\r\n\r\n  setResponseHashKey(responseHashKey: string) {\r\n    this.responseHashKey = responseHashKey;\r\n  }\r\n\r\n  setProdId(prodid: string) {\r\n    this.prodid = prodid;\r\n  }\r\n\r\n  setTxnId(txnid: string) {\r\n    this.txnid = txnid;\r\n  }\r\n\r\n  setCustAcc(custacc: string) {\r\n    this.custacc = custacc;\r\n  }\r\n\r\n  setAmount(amt: string) {\r\n    this.amt = amt;\r\n  }\r\n\r\n  setCurrency(txncurr: string) {\r\n    this.txncurr = txncurr;\r\n  }\r\n\r\n  setTxnType(txntype: string) {\r\n    this.txntype = txntype;\r\n  }\r\n\r\n  setReturnUrl(returnURL: string) {\r\n    this.returnURL = 'https://www.atomtech.in/angular-kit-handle/params_response.php';\r\n  }\r\n\r\n  setTxnsCamt(txnscamt: string) {\r\n    this.txnscamt = txnscamt;\r\n  }\r\n\r\n  setCustomerName(udf1: string) {\r\n    this.udf1 = udf1;\r\n  }\r\n\r\n  setCustomerEmail(udf2: string) {\r\n    this.udf2 = udf2;\r\n  }\r\n\r\n  setCustomerMobile(udf3: string) {\r\n    this.udf3 = udf3;\r\n  }\r\n\r\n  setCustomerAddress(udf4: string) {\r\n    this.udf4 = udf4;\r\n  }\r\n\r\n  setMdd(mdd: string) {\r\n    this.mdd = mdd;\r\n  }\r\n\r\n  setBankId(bankId: string) {\r\n    this.bankId = bankId;\r\n  }\r\n  generateChecksum() {\r\n    this.signature = this.loginId + this.password + this.txntype + this.prodid + this.txnid + this.amt + this.txncurr;\r\n    return hash.sha512.hmac(this.requestHashKey, this.signature);\r\n  }\r\n\r\n\r\n\r\n  payNow() {\r\n\r\n    let urlToPay = this.url;\r\n    urlToPay += '?login=' + this.loginId;\r\n    urlToPay += '&pass=' + this.password;\r\n    urlToPay += '&ttype=' + this.txntype;\r\n    urlToPay += '&prodid=' + this.prodid;\r\n    urlToPay += '&amt=' + this.amt;\r\n    urlToPay += '&txncurr=' + this.txncurr;\r\n    urlToPay += '&txnscamt=' + this.txnscamt;\r\n    urlToPay += '&clientcode=' + btoa(this.clientCode);\r\n    urlToPay += '&txnid=' + this.txnid;\r\n    urlToPay += '&date=' + this.formatDate(new Date);\r\n    urlToPay += '&custacc=' + this.custacc;\r\n    urlToPay += '&ru=' + this.returnURL;\r\n    urlToPay += '&signature=' + this.generateChecksum();\r\n    urlToPay += '&udf1=' + this.udf1;\r\n    urlToPay += '&udf2=' + this.udf2;\r\n    urlToPay += '&udf3=' + this.udf3;\r\n    urlToPay += '&udf4=' + this.udf4;\r\n\r\n    if (this.mdd != null) {\r\n      urlToPay += '&mdd=' + this.mdd;\r\n    }\r\n\r\n    if (this.bankId != null) {\r\n      urlToPay += '&bankid=' + this.bankId;\r\n    }\r\n\r\n    const url = encodeURI(urlToPay);\r\n    let res = null;\r\n\r\n    const left = (window.screen.width / 2) - ((1200 / 2) + 10);\r\n    const top = '22%';\r\n\r\n    const childWindow = window.open(url, 'Atom Paynetz', 'status=no,height=600,width=1200,resizable=yes,left='\r\n      + left + ',top=' + top + ',screenX=' + left + ',screenY='\r\n      + top + ',toolbar=no,menubar=no,scrollbars=no,location=no,directories=no');\r\n\r\n    const promise = new Promise(resolve => {\r\n      window.addEventListener('message', function (e) {\r\n        if (e.origin === 'https://www.atomtech.in') {\r\n          res = e.data;\r\n          childWindow.close();\r\n        }\r\n      }, false);\r\n      const intervalID = window.setInterval(checkWindow, 500);\r\n      function checkWindow(e: any) {\r\n        if (childWindow && childWindow.closed) {\r\n          if (res) {\r\n            this.response = res;\r\n            window.clearInterval(intervalID);\r\n            resolve({\r\n              status: true,\r\n              data: res,\r\n            });\r\n          } else {\r\n            window.clearInterval(intervalID);\r\n            window.clearInterval(intervalID);\r\n            resolve({\r\n              status: false,\r\n              data: 'payment not completed',\r\n            });\r\n          }\r\n\r\n        }\r\n      }\r\n    });\r\n\r\n    return promise;\r\n\r\n  }\r\n\r\n  validateResponse(mmp_txn: any, mer_txn: any, f_code: any, prod: any, discriminator: any, amt: any, bank_txn: any, signature: any) {\r\n    const string_verify = mmp_txn + mer_txn + f_code + prod + discriminator + amt + bank_txn;\r\n    const sig = hash.sha512.hmac(this.responseHashKey, string_verify);\r\n\r\n    if (signature === sig) {\r\n      return {\r\n        'status': true,\r\n        'message': 'Signature matched = ' + sig + ' = ' + this.responseHashKey\r\n      };\r\n    } else {\r\n      return {\r\n        'status': false,\r\n        'message': 'Signature mismatched = ' + sig + ' = ' + this.responseHashKey\r\n      };\r\n    }\r\n  }\r\n\r\n  formatDate(date: any) {\r\n    const day = date.getDate();\r\n    let monthIndex = date.getMonth() + 1;\r\n    const year = date.getFullYear();\r\n    const second = date.getSeconds();\r\n    const hours = date.getHours();\r\n    const minutes = date.getMinutes();\r\n    if (monthIndex < 10) {\r\n      monthIndex = '0' + monthIndex;\r\n    }\r\n    return day + '/' + Number(monthIndex) + '/' + year + ' ' + hours + ':' + minutes + ':' + second;\r\n  }\r\n\r\n}\r\n","\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport { ProcessPaymentComponent } from './ProcessPayment/ProcessPayment.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    BrowserModule,\r\n  ],\r\n  declarations: [ProcessPaymentComponent],\r\n  exports: []\r\n})\r\n\r\nexport class Ng6AtomPaynetzModule { }\r\n"]}