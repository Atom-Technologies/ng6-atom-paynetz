{"version":3,"sources":["ng://ng6-atom-paynetz/lib/ProcessPayment/ProcessPayment.component.ts","ng://ng6-atom-paynetz/lib/ng6-atom-paynetz.module.ts"],"names":["ProcessPaymentComponent","_this","this","response","prototype","ngOnInit","setLoginid","login","loginId","setPassword","password","setURL","url","setClientCode","clientCode","setRequestHaskKey","requestHashKey","setResponseHashKey","responseHashKey","setProdId","prodid","setTxnId","txnid","setCustAcc","custacc","setAmount","amt","setCurrency","txncurr","setTxnType","txntype","setReturnUrl","returnURL","setTxnsCamt","txnscamt","setCustomerName","udf1","setCustomerEmail","udf2","setCustomerMobile","udf3","setCustomerAddress","udf4","generateChecksum","signature","hash.sha512","hmac","payNow","urlToPay","btoa","formatDate","Date","encodeURI","res","left","window","screen","width","top","height","childWindow","open","Promise","resolve","addEventListener","e","origin","data","close","intervalID","setInterval","checkWindow","closed","clearInterval","status","validateResponse","mmp_txn","mer_txn","f_code","prod","discriminator","bank_txn","string_verify","sig","message","date","day","getDate","monthIndex","getMonth","year","getFullYear","second","getSeconds","hours","getHours","minutes","getMinutes","Number","Component","args","selector","template","styles","Ng6AtomPaynetzModule","NgModule","imports","BrowserModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport * as hash from 'js-sha512';\n\n@Component({\n  selector: 'lib-config',\n  template: `<p>\n  config works!\n</p>\n`,\n  styles: [``]\n})\n\n\n\nexport class ProcessPaymentComponent implements OnInit {\n\n  private loginId = '';\n  private password = '';\n  private url = '';\n  private clientCode = '';\n  private requestHashKey = '';\n  private responseHashKey = '';\n  private prodid = '';\n  private signature = '';\n  private amt = '';\n  private txncurr = '';\n  private txntype = '';\n  private txnscamt = '';\n  private txnid = '';\n  private custacc = '';\n  private returnURL = '';\n  private udf1 = '';\n  private udf2 = '';\n  private udf3 = '';\n  private udf4 = '';\n  private childWindow: any;\n  private response: any;\n  constructor() {\n  }\n\n\n  ngOnInit() {\n  }\n\n  setLoginid(login: string) {\n    this.loginId = login;\n  }\n\n  setPassword(password: string) {\n    this.password = password;\n  }\n\n  setURL(url: string) {\n    this.url = url;\n  }\n\n  setClientCode(clientCode: string) {\n    this.clientCode = clientCode;\n  }\n\n  setRequestHaskKey(requestHashKey: string) {\n    this.requestHashKey = requestHashKey;\n  }\n\n  setResponseHashKey(responseHashKey: string) {\n    this.responseHashKey = responseHashKey;\n  }\n\n  setProdId(prodid: string) {\n    this.prodid = prodid;\n  }\n\n  setTxnId(txnid: string) {\n    this.txnid = txnid;\n  }\n\n  setCustAcc(custacc: string) {\n    this.custacc = custacc;\n  }\n\n  setAmount(amt: string) {\n    this.amt = amt;\n  }\n\n  setCurrency(txncurr: string) {\n    this.txncurr = txncurr;\n  }\n\n  setTxnType(txntype: string) {\n    this.txntype = txntype;\n  }\n\n  setReturnUrl(returnURL: string) {\n    this.returnURL = 'https://www.atomtech.in/angular-kit-handle/params_response.php';\n  }\n\n  setTxnsCamt(txnscamt: string) {\n    this.txnscamt = txnscamt;\n  }\n\n  setCustomerName(udf1: string) {\n    this.udf1 = udf1;\n  }\n\n  setCustomerEmail(udf2: string) {\n    this.udf2 = udf2;\n  }\n\n  setCustomerMobile(udf3: string) {\n    this.udf3 = udf3;\n  }\n\n  setCustomerAddress(udf4: string) {\n    this.udf4 = udf4;\n  }\n\n  generateChecksum() {\n    this.signature = this.loginId + this.password + this.txntype + this.prodid + this.txnid + this.amt + this.txncurr;\n    return hash.sha512.hmac(this.requestHashKey, this.signature);\n  }\n\n\n\n  payNow() {\n\n    let urlToPay = this.url;\n    urlToPay += '?login=' + this.loginId;\n    urlToPay += '&pass=' + this.password;\n    urlToPay += '&ttype=' + this.txntype;\n    urlToPay += '&prodid=' + this.prodid;\n    urlToPay += '&amt=' + this.amt;\n    urlToPay += '&txncurr=' + this.txncurr;\n    urlToPay += '&txnscamt=' + this.txnscamt;\n    urlToPay += '&clientcode=' + btoa(this.clientCode);\n    urlToPay += '&txnid=' + this.txnid;\n    urlToPay += '&date=' + this.formatDate(new Date);\n    urlToPay += '&custacc=' + this.custacc;\n    urlToPay += '&ru=' + this.returnURL;\n    urlToPay += '&signature=' + this.generateChecksum();\n    urlToPay += '&udf1=' + this.udf1;\n    urlToPay += '&udf2=' + this.udf2;\n    urlToPay += '&udf3=' + this.udf3;\n    urlToPay += '&udf4=' + this.udf4;\n    const url = encodeURI(urlToPay);\n    let res = null;\n\n    const left = (window.screen.width / 2) - ((1200 / 2) + 10);\n    const top = (window.screen.height / 2) - ((850 / 2) + 10);\n\n    const childWindow = window.open(url, 'Atom Paynetz', 'status=no,height=600,width=1200,resizable=yes,left='\n      + left + ',top=' + top + ',screenX=' + left + ',screenY='\n      + top + ',toolbar=no,menubar=no,scrollbars=no,location=no,directories=no');\n    // const childWindow = window.open(url, 'Atom Paynetz', 'width=1100, height=900');\n    const promise = new Promise(resolve => {\n      window.addEventListener('message', function (e) {\n        if (e.origin === 'https://www.atomtech.in') {\n          res = e.data;\n          childWindow.close();\n        }\n      }, false);\n      const intervalID = window.setInterval(checkWindow, 500);\n      function checkWindow(e: any) {\n        if (childWindow && childWindow.closed) {\n          if (res) {\n            this.response = res;\n            window.clearInterval(intervalID);\n            resolve({\n              status: true,\n              data: res,\n            });\n          } else {\n            window.clearInterval(intervalID);\n            window.clearInterval(intervalID);\n            resolve({\n              status: false,\n              data: 'payment not completed',\n            });\n          }\n\n        }\n      }\n    });\n\n    return promise;\n\n  }\n\n  get_response = () => {\n    return this.response;\n  }\n\n\n  validateResponse(mmp_txn: any, mer_txn: any, f_code: any, prod: any, discriminator: any, amt: any, bank_txn: any, signature: any) {\n    const string_verify = mmp_txn + mer_txn + f_code + prod + discriminator + amt + bank_txn;\n    const sig = hash.sha512.hmac(this.responseHashKey, string_verify);\n\n    if (signature === sig) {\n      return {\n        'status': true,\n        'message': 'Signature matched = ' + sig + ' = ' + this.responseHashKey\n      };\n    } else {\n      return {\n        'status': false,\n        'message': 'Signature mismatched = ' + sig + ' = ' + this.responseHashKey\n      };\n    }\n  }\n\n  formatDate(date: any) {\n    const day = date.getDate();\n    let monthIndex = date.getMonth() + 1;\n    const year = date.getFullYear();\n    const second = date.getSeconds();\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    if (monthIndex < 10) {\n      monthIndex = '0' + monthIndex;\n    }\n    return day + '/' + Number(monthIndex) + '/' + year + ' ' + hours + ':' + minutes + ':' + second;\n  }\n\n}\n","\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport { ProcessPaymentComponent } from './ProcessPayment/ProcessPayment.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n  ],\n  declarations: [ProcessPaymentComponent],\n  exports: []\n})\n\nexport class Ng6AtomPaynetzModule { }\n"]}